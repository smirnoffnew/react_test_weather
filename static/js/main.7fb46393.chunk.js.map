{"version":3,"sources":["constants.js","store/reducers/handleFavoriteLocationsList.js","store/reducers/index.js","store/reducers/handleTemperatureType.js","store/index.js","components/NewLocation.js","components/LocationsCards.js","components/LocationsTable.js","components/FavoriteLocationsList.js","components/App.js","serviceWorker.js","index.js"],"names":["API_KEY","BASE_URL","REMOVE_LOCATION","initialState","combineReducers","favoriteLocationsList","state","action","type","payload","index","findIndex","location","id","splice","isTemperatureInF","persistedState","serializedState","localStorage","getItem","JSON","parse","e","console","log","loadFromLocalStorage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","subscribe","stringify","setItem","saveToLocalStorage","getState","useStyles","makeStyles","theme","wrapper","display","flexDirection","alignItems","justifyContent","marginTop","marginBottom","width","breakpoints","up","textField","spacing","marginRight","button","height","transform","withWidth","useState","inputLabel","setInputLabel","useSelector","classes","textInput","React","createRef","dispatch","useDispatch","className","TextField","placeholder","autoFocus","variant","margin","inputRef","label","error","onClick","Button","color","current","value","axios","get","then","data","foundLocationKey","Key","length","undefined","find","locationKey","LocalizedName","AdministrativeArea","ID","uuid","v4","catch","message","dir","cardUpperSection","deleteIconSpan","cardMiddleSection","cardLowerSection","LocationsCards","favoriteLocationsData","map","Card","key","raised","style","background","isDayTime","Typography","gutterBottom","component","temperatureF","String","fromCharCode","temperatureC","src","weatherIcon","alt","align","weatherText","LocationsTable","isRowGrey","backgroundColor","Table","TableBody","TableRow","Math","random","TableCell","padding","Fab","size","errorMessage","setErrorMessage","setFavoriteLocationsData","useEffect","fetchWeather","promises","i","push","all","spread","responses","receivedData","icondId","WeatherIcon","Temperature","Imperial","Value","Metric","ifShowTemperatureF","WeatherText","IsDayTime","watcher","setInterval","clearInterval","Switch","checked","onChange","mobileDeviceTheme","createMuiTheme","palette","primary","main","indigo","secondary","pink","default","largeDeviceTheme","paper","grey","title","renderComponents","NewLocation","FavoriteLocationsList","basename","process","MuiThemeProvider","CssBaseline","Container","maxWidth","Paper","elevation","Boolean","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7fb46393.chunk.js","sourcesContent":["export const API_KEY = 'ASWcvsmMjzKodukBPmM4NMJY6mFIRoA5';\nexport const BASE_URL = 'http://dataservice.accuweather.com'\n\nexport const ADD_LOCATION = 'ADD_LOCATION';\nexport const REMOVE_LOCATION = 'REMOVE_LOCATION';\nexport const TOGGLE_TEMPERATURE_TYPE = 'TOGGLE_TEMPERATURE_TYPE';\n\n\n","import { ADD_LOCATION, REMOVE_LOCATION } from \"../../constants\";\n\nconst initialState = [];\n\nexport default (state = initialState, action) => {\n\n  switch (action.type) {\n\n    case ADD_LOCATION:\n      return [ action.payload, ...state ];\n\n    case REMOVE_LOCATION:\n      const index = state.findIndex(location => location && location.id === action.payload.id)\n      return index !== -1 ? (state.splice(index, 1), [...state]) : state;\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport handleFavoriteLocationsList from \"./handleFavoriteLocationsList\";\nimport handleTemperatureType from './handleTemperatureType';\n\nexport default combineReducers({\n\n    favoriteLocationsList: handleFavoriteLocationsList,\n    isTemperatureInF: handleTemperatureType\n});\n","import { TOGGLE_TEMPERATURE_TYPE } from \"../../constants\";\n\nconst isTemperatureInF = true;\n\nexport default (state = isTemperatureInF, action) => {\n\n  switch (action.type) {\n\n    case TOGGLE_TEMPERATURE_TYPE:\n      return !state;\n\n    default:\n      return state;\n  }\n};\n","import { createStore, compose } from \"redux\";\nimport reducers from \"./reducers\";\n\n\nfunction saveToLocalStorage(state) {\n\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction loadFromLocalStorage() {\n\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (serializedState === null) return undefined;\n    return JSON.parse(serializedState);\n  } catch (e) {\n    console.log(e);\n    return undefined;\n  }\n}\n\nconst persistedState = loadFromLocalStorage();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n\n  reducers,\n  persistedState,\n  composeEnhancers()\n);\n\nstore.subscribe(() => saveToLocalStorage(store.getState()));\n\nexport default store;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport uuid from \"uuid\";\nimport axios from 'axios';\n\nimport { \n\n    TextField, \n    Button, \n    makeStyles, \n    withWidth \n} from \"@material-ui/core\";\n\nimport { \n\n    BASE_URL, \n    API_KEY, \n    ADD_LOCATION \n} from '../constants'\n\n\n\nconst useStyles = makeStyles(theme => ({\n\n    wrapper: {\n\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginTop: '1rem',\n        marginBottom: '1rem',\n        width: '100%',\n\n        [theme.breakpoints.up('sm')]: {\n\n            marginTop: '3rem',\n            marginBottom: '3rem',\n            flexDirection: 'row',\n          },\n    },\n\n    textField: {\n\n        width: '100%',\n            \n        [theme.breakpoints.up('sm')]: {\n            width: '80%',\n            marginTop: theme.spacing(0.2),\n            marginRight: theme.spacing(1),\n          },\n\n    },\n\n    button: {\n\n        marginTop: theme.spacing(1),\n        width: '7rem',\n        height: '2.4rem',\n\n        [theme.breakpoints.up('sm')]: {\n            marginTop: 0,\n            transform: 'translateY(-1.5px)',\n            height: '2.6rem',\n            width: '20%',\n          },\n    }\n  }));\n\n\n\nexport default withWidth()(({width}) => {\n\n\n\n    const [inputLabel, setInputLabel] = useState('Enter location');\n\n    const favoriteLocationsList = useSelector(state => state.favoriteLocationsList)\n    const classes = useStyles();\n    const textInput = React.createRef()\n    const dispatch = useDispatch()\n\n    \n    const handleInputClick = () => {\n\n        if (inputLabel !== 'Enter location') {\n            \n            setInputLabel('Enter location'); \n        }\n    }\n\n    const isLocationAlreadyOnList = (foundLocationKey) => {\n\n        if (favoriteLocationsList.length === 0) {\n            return false;\n        }\n         \n        const result = favoriteLocationsList.find(location => {\n            return location.locationKey === foundLocationKey\n        })\n\n        return result !== undefined ? true : false;\n    }\n\n\n    const handleSearch = () => {\n\n        if (textInput.current.value === '') {\n\n            setInputLabel(\"You haven't entered anything yet\");             \n            return;\n        }\n\n    \n        \n        axios.get   (`${BASE_URL}/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${textInput.current.value}`)\n\n        .then( ({data})  => {\n            \n\n            if (isLocationAlreadyOnList(data[0].Key)) {\n\n                setInputLabel(\"Already on the list\");\n                return;\n            }\n\n            textInput.current.value = ''\n\n            const location =  `${data[0].LocalizedName}, ${data[0].AdministrativeArea.ID}`;\n            const locationKey = data[0].Key;\n\n            dispatch({ \n\n                type: ADD_LOCATION, \n\n                payload: {\n\n                    location,\n                    locationKey,\n                    id: uuid.v4(),\n                } \n            })\n            \n        })\n\n        .catch( ({message}) => { \n\n\n            switch(message) {\n                \n                case \"Cannot read property 'LocalizedName' of undefined\":\n                    setInputLabel('The location was not found');\n                    break;\n\n                case \"Network Error\":\n                    setInputLabel(\"This api key requests limit exceeded\");\n                    break;\n                \n                default:\n                    console.dir(message)\n                    break;\n            }\n            \n        })\n\n    }\n\n\n\n    return (\n\n        <div className={classes.wrapper}>\n\n            <TextField \n           \n                className={classes.textField}\n                placeholder='San Francisco, CA'\n                autoFocus\n                variant=\"outlined\"\n                margin='dense'\n\n                inputRef={textInput}\n                label={inputLabel}\n                error={inputLabel !== 'Enter location'}\n                \n                onClick={handleInputClick}\n            />\n            \n            <Button \n\n                className={classes.button}\n                variant=\"contained\" \n                color=\"primary\"\n                onClick={handleSearch}\n            >\n\n                Search\n\n            </Button>\n\n        </div>\n\n    )\n});","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { \n    makeStyles,\n    Typography,\n    Card,\n    \n\n} from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport {  \n    REMOVE_LOCATION \n} from '../constants';\n\n\n\nconst useStyles = makeStyles(theme => ({\n\n    cardUpperSection: {\n\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        margin: '1rem 2rem 1rem 2rem',\n\n    },\n\n    deleteIconSpan: {\n\n        transform: 'translateY(-2.4px)',\n    },\n\n    cardMiddleSection: {\n\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginTop: '1rem',\n        marginBottom: '1rem',\n    },\n\n    cardLowerSection: {\n\n        margin: '1rem',\n    }\n\n  }));\n\n\n\n\nexport default function LocationsCards({ favoriteLocationsData }) {\n\n    const isTemperatureInF = useSelector(state => state.isTemperatureInF);\n    const dispatch = useDispatch()\n    const classes = useStyles();\n\n\n    const removeLocation = (id) => {\n\n        dispatch({ \n\n                type: REMOVE_LOCATION, \n                payload: { id } \n            }\n        )\n    }\n\n\n    return (\n        \n        <div>\n                        \n            {\n                favoriteLocationsData.map((data) => \n                    \n\n                    <Card\n                        key={ data.id }\n                        raised\n                        style={{\n                            \n                            background: data.isDayTime \n                                        ?\n                                        'linear-gradient(to top left, #f37335, #fdc830 )'\n                                        :\n                                        'linear-gradient(to top left, #7f7fd5, #86a8e7, #91eae4)',\n\n                            marginTop: '1rem',\n                            marginBottom: '1rem',\n                        }}\n                    >\n                    \n                        <div className={classes.cardUpperSection}>\n\n                            <Typography \n\n                                gutterBottom \n                                variant=\"h6\" \n                                color='primary' \n                                component=\"p\"\n                            >\n\n                                    {data.location}\n\n                            </Typography>\n\n                            <span\n                                className={classes.deleteIconSpan} \n                                onClick={() => { removeLocation(data.id) }}\n                            >\n\n                                <DeleteIcon \n                                    color='secondary'\n                                    \n                                />\n\n                            </span>\n\n                        </div>\n\n\n                        <div className={classes.cardMiddleSection}>\n                                \n                                <Typography \n\n                                    variant=\"h5\" \n                                    color=\"textPrimary\" \n                                    component=\"span\"\n                                >\n\n                                    {\n                                        isTemperatureInF \n                                        ? \n                                            `${data.temperatureF}${String.fromCharCode(176)}` \n                                        :\n                                            `${data.temperatureC}${String.fromCharCode(176)}`\n                                    }\n                                    \n                                </Typography>\n\n                                <img \n                                    src={`${data.weatherIcon}`} \n                                    alt='weather icon' \n                                />\n\n                        </div>\n\n\n                        <div className={classes.cardLowerSection}>\n\n                            <Typography \n                                variant=\"body1\" \n                                color=\"textPrimary\" \n                                align=\"center\"\n                                gutterBottom\n                                component=\"p\"\n                            >\n\n                                {data.weatherText}\n\n                            </Typography>\n\n                        </div>\n\n                        \n                    </Card>\n                )\n            }\n\n\n\n        </div>\n\n    )\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { \n\n    Table, \n    TableBody, \n    TableCell, \n    TableRow,\n    Fab,\n\n\n} from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport {  \n\n    REMOVE_LOCATION \n\n} from '../constants';\n\n\n\n\nexport default function LocationsTable({ favoriteLocationsData }) {\n    \n    const isTemperatureInF = useSelector(state => state.isTemperatureInF);\n\n    const dispatch = useDispatch()\n\n    const isRowGrey = (index) => ({ backgroundColor: index % 2 > 0 ? 'transparent' : '#EAE7E7' })\n\n    const removeLocation = (id) => {\n\n        dispatch({ \n\n                type: REMOVE_LOCATION, \n                payload: { id } \n            }\n        )\n    }\n\n\n    return (\n        \n        <Table \n            \n            style={{ \n                \n                width: \"100%\", \n                marginTop: '2rem' \n            }}\n        >\n\n                        <TableBody>\n\n                            {\n                                favoriteLocationsData.map((data, index) => \n\n                                    <TableRow key={Math.random()} style={isRowGrey(index)}>\n\n                                        <TableCell>\n                                            {data.location}\n                                        </TableCell>\n\n                                        <TableCell>\n                                            {\n                                                isTemperatureInF \n                                                ? \n                                                    `${data.temperatureF}${String.fromCharCode(176)}` \n                                                :\n                                                    `${data.temperatureC}${String.fromCharCode(176)}`\n                                            }\n                                        </TableCell>\n\n                                        <TableCell  padding='none'>\n                                            {data.weatherText}\n                                        </TableCell>\n\n                                        <TableCell>\n                                            <img src={`${data.weatherIcon}`} alt='weather icon' />\n                                        </TableCell> \n\n                                        <TableCell>\n\n                                            <Fab \n                                                size=\"small\" \n                                                color=\"secondary\"\n\n                                                onClick={() => { removeLocation(data.id) }}\n                                            >\n                                                <DeleteIcon />                                                \n                                            </Fab>\n\n                                        </TableCell>\n                                        \n                                    </TableRow>\n                                )\n                            }\n\n                        </TableBody>\n\n                    </Table>\n\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport axios from 'axios';\n\nimport { \n\n    withWidth,\n    Switch,\n    Typography,\n\n} from \"@material-ui/core\";\n\n\nimport {  \n\n    TOGGLE_TEMPERATURE_TYPE,\n    BASE_URL, \n    API_KEY, \n\n} from '../constants';\n\nimport LocationCards from './LocationsCards';\nimport LocationTable from './LocationsTable';\n\n\n\nexport default withWidth()(({width}) => {\n\n\n    const [errorMessage, setErrorMessage] = useState(false)    \n    const [favoriteLocationsData, setFavoriteLocationsData] = useState([]); \n\n    const favoriteLocationsList = useSelector(state => state.favoriteLocationsList);\n    const isTemperatureInF = useSelector(state => state.isTemperatureInF);\n  \n    const dispatch = useDispatch()\n    const handleToggleTemperatureType = () => {\n\n        dispatch({ \n\n            type: TOGGLE_TEMPERATURE_TYPE, \n        }\n    )\n    };\n\n\n    useEffect(() => {\n\n\n        const fetchWeather = () => {\n\n            let promises = [];\n    \n            for (let i = 0; i < favoriteLocationsList.length; i++) {\n    \n                promises.push(\n    \n                    axios.get(`${BASE_URL}/currentconditions/v1/${favoriteLocationsList[i].locationKey}?apikey=${API_KEY}`)\n                );\n            }\n    \n            axios.all(promises)\n    \n                .then(axios.spread((...responses) => {\n    \n    \n                    return responses.map((receivedData, index) => {\n    \n                        const location = receivedData.data[0];\n                        const icondId = String(location.WeatherIcon).length === 1 \n                            ? \n                                `0${location.WeatherIcon}` \n                            :\n                                location.WeatherIcon;\n                            \n                        return {\n    \n                            location: favoriteLocationsList[index].location,\n                            id: favoriteLocationsList[index].id,\n    \n                            temperatureF: location.Temperature.Imperial.Value,\n                            temperatureC: location.Temperature.Metric.Value,\n                            ifShowTemperatureF: true,\n    \n                            weatherText: location.WeatherText,\n                            weatherIcon: `https://developer.accuweather.com/sites/default/files/${icondId}-s.png` ,\n\n                            isDayTime: location.IsDayTime,\n    \n                        }\n                    });\n                  })\n                )\n    \n                .then(data => {\n                    \n                    setFavoriteLocationsData(data)\n                })\n    \n                .catch( ({message}) => {\n\n                    if(message === \"Network Error\") {\n\n                        setErrorMessage(true)\n                    }\n                    \n                    console.dir(message)\n                })\n    \n        };\n\n\n\n\n        fetchWeather();\n        \n\n        const watcher = setInterval(() => {\n            \n            fetchWeather();\n\n        },  5*60*1000);\n\n\n        return () => {\n\n            clearInterval(watcher);\n        };\n          \n        \n    }, [favoriteLocationsList, favoriteLocationsList.length])\n\n\n\n    return (\n\n        errorMessage \n\n            ?\n\n            <Typography\n                variant='body1'\n                color='secondary'\n            >\n                \n                The limit of requests of this api key exceeded.\n\n            </Typography>\n\n            :\n\n\n            <div>\n\n                <div>\n\n                    <label>\n\n                        Celcius\n\n                    </label>\n\n                    <Switch\n\n                        checked={isTemperatureInF}\n                        onChange={handleToggleTemperatureType}\n                        color=\"primary\"\n                    />\n\n                    <label>\n\n                        Fahrenheit\n\n                    </label>\n\n                </div>\n\n                \n                {\n                    width === 'xs'\n\n                        ?\n\n                        <LocationCards \n\n                            favoriteLocationsData={favoriteLocationsData} \n                        />\n\n                        :\n                    \n                        <LocationTable \n                        \n                            favoriteLocationsData={favoriteLocationsData} \n                        />\n\n                }\n            \n            </div>\n    )\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// {\n//     width === 'xs'\n\n//     ?\n\n//     <div>\n        \n//         {\n//             favoriteLocationsData.map((data) => \n                \n\n//                 <Card\n//                     key={ data.id }\n//                     raised\n//                     style={{\n                        \n//                         background: data.isDayTime \n//                                     ?\n//                                     'linear-gradient(to top left, #f37335, #fdc830 )'\n//                                     :\n//                                     'linear-gradient(to top left, #7f7fd5, #86a8e7, #91eae4)',\n\n//                         marginTop: '1rem',\n//                         marginBottom: '1rem',\n//                     }}\n//                 >\n                \n//                     <div className={classes.cardUpperSection}>\n\n//                         <Typography \n\n//                             gutterBottom \n//                             variant=\"h6\" \n//                             color='primary' \n//                             component=\"p\"\n//                         >\n\n//                                 {data.location}\n\n//                         </Typography>\n\n//                         <span\n//                             className={classes.deleteIconSpan} \n//                             onClick={() => { removeLocation(data.id) }}\n//                         >\n\n//                             <DeleteIcon \n//                                 color='secondary'\n                                \n//                             />\n\n//                         </span>\n\n//                     </div>\n\n\n//                     <div className={classes.cardMiddleSection}>\n                            \n//                             <Typography \n\n//                                 variant=\"h5\" \n//                                 color=\"textPrimary\" \n//                                 component=\"span\"\n//                             >\n//                                 {\n//                                     ifShowTemperatureInF \n//                                     ? \n//                                         `${data.temperatureF}${String.fromCharCode(176)}` \n//                                     :\n//                                         `${data.temperatureC}${String.fromCharCode(176)}`\n//                                 }\n                                \n//                             </Typography>\n\n//                             <img src={`${data.weatherIcon}`} alt='weather icon' />\n//                     </div>\n\n\n//                     <div className={classes.cardLowerSection}>\n\n//                         <Typography \n//                             variant=\"body1\" \n//                             color=\"textPrimary\" \n//                             align=\"center\"\n//                             gutterBottom\n//                             component=\"p\"\n//                         >\n\n//                             {data.weatherText}\n\n//                         </Typography>\n\n//                     </div>\n\n                    \n//                 </Card>\n//             )\n//         }\n\n\n\n//     </div>\n\n//     :\n\n//     <Table style={{ width: \"100%\", marginTop: '2rem' }}>\n\n//         <TableBody>\n\n//             {\n//                 favoriteLocationsData.map((data, index) => \n\n//                     <TableRow key={Math.random()} style={isRowGrey(index)}>\n\n//                         <TableCell>\n//                             {data.location}\n//                         </TableCell>\n\n//                         <TableCell>\n//                             {\n//                                 ifShowTemperatureInF \n//                                 ? \n//                                     `${data.temperatureF}${String.fromCharCode(176)}` \n//                                 :\n//                                     `${data.temperatureC}${String.fromCharCode(176)}`\n//                             }\n//                         </TableCell>\n\n//                         <TableCell  padding='none'>\n//                             {data.weatherText}\n//                         </TableCell>\n\n//                         <TableCell>\n//                             <img src={`${data.weatherIcon}`} alt='weather icon' />\n//                         </TableCell> \n\n//                         <TableCell>\n\n//                             <Fab \n//                                 size=\"small\" \n//                                 color=\"secondary\"\n\n//                                 onClick={() => { removeLocation(data.id) }}\n//                             >\n//                                 <DeleteIcon />                                                \n//                             </Fab>\n\n//                         </TableCell>\n                        \n//                     </TableRow>\n//                 )\n//             }\n\n//         </TableBody>\n\n//     </Table>\n// }","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport {\n  \n  MuiThemeProvider,\n  CssBaseline,\n  createMuiTheme,\n  Paper,\n  Container,\n  Typography,\n  withWidth,\n} from \"@material-ui/core\";\n\nimport {\n\n  pink, \n  indigo, \n  grey, \n} from \"@material-ui/core/colors\";\n\n\nimport store from \"../store\";\nimport NewLocation from './NewLocation'\nimport FavoriteLocationsList from './FavoriteLocationsList'\n\n\nconst mobileDeviceTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: indigo[500],\n    },\n    secondary: {\n      main: pink[600],\n    },\n    background: {\n      default: \"#fff\",\n    },\n  },\n  \"@global\": {\n    \"html, body, #root\": {\n      width: \"100%\",\n    },\n  },\n});\n\n\nconst largeDeviceTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: indigo[500],\n    },\n    secondary: {\n      main: pink[400],\n    },\n    background: {\n      paper: \"#fff\",\n      default: grey[100],\n    },\n  },\n  \"@global\": {\n    \"html, body, #root\": {\n      width: \"100%\",\n    },\n  },\n});\n\n\nconst useStyles = makeStyles(theme => ({\n\n  title: {\n\n    marginTop: '2rem',\n  },\n\n  paper: {\n\n    height: \"100%\",\n    width: '100%',\n    padding: \"5%\",\n    \n    [theme.breakpoints.up('md')]: {\n      marginTop: \"2rem\",\n      marginBottom: \"2rem\",\n      padding: \"10%\",\n    },\n  },\n\n}));\n\n\n\nexport default withWidth()(({width}) => {\n\n\n    const classes = useStyles();\n\n    const renderComponents = () => {\n\n      return (\n        <>\n\n          <Typography\n\n            className={classes.title}\n            variant={ width === 'xs' ? \"h5\" : \"h4\"}\n            color=\"secondary\"\n            align=\"center\"\n            gutterBottom\n          >\n\n            Current Weather\n\n          </Typography>\n\n          <NewLocation />\n          <FavoriteLocationsList />\n\n        </>\n      );\n    }\n\n\n    return (\n\n      <Provider store={store}>\n        <BrowserRouter \n        \n          basename={process.env.PUBLIC_URL}\n          >\n          <MuiThemeProvider theme={  width === 'xs' ? mobileDeviceTheme : largeDeviceTheme }>\n            <CssBaseline />\n             <Container maxWidth=\"md\">\n\n              {\n                  width === 'xs' \n                  \n                  ?\n                  \n                    renderComponents()\n\n                  :\n\n                    <Paper\n\n                      className={classes.paper}\n                      component=\"div\" \n                      elevation={2}\n                    >\n    \n                      {renderComponents()}\n    \n                    </Paper> \n              }\n\n            </Container>\n          </MuiThemeProvider>\n        </BrowserRouter>\n      </Provider>\n      \n    );\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    \n    <App />,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}